# %%
from selenpy.Crawler import BaseCrawler
from selenpy.Reader import Loader

from selenium.common.exceptions import NoSuchElementException
from selenium.webdriver.common.by import By
import re


class SelenpyCrawler(BaseCrawler):

    # table name
    collection = "data"
    # target domain
    domain = "https://www.amazon.com"
    # product display page pattern
    fURL = "https://www.amazon.com/dp/%s"
    # load a list of asins
    # targets = Loader.read_pkl("config/tasks.pkl")
    targets = [
        "B00KQU3GKA",
        "B00L96PK4A",
        "B00MY2PN36",
        "B00O0TEZTY",
        "B00OR2BK60",
        "B00SE5KORW",
        "B00T0M7LJC",
        "B00W4X653W",
        "B014Y3WV0A",
        "B014Y3X8RU",
        "B014Y3YDP6",
        "B014Y3YILU",
        "B014Y3YNOM",
        "B015RFYW8I",
        "B017A9VSJK",
        "B017WBJS3E",
        "B01H3WADU4",
        "B01HXJ4WJK",
        "B01IMVWZ9C",
        "B01J6MRF6O",
        "B01JPCHK1K",
        "B01JZ6N6G4",
        "B01K0DQXSE",
        "B01K1M26NA",
        "B01K1M28AQ",
        "B01K1M2A7W",
        "B01K8C5FZY",
        "B01M3VB95P",
        "B01M5HEMXA",
        "B01M69EFY1",
        "B01M6A5PU9",
        "B01M7VQ3N4",
        "B01M9G8Z9U",
        "B01M9G8Z9Z",
        "B01MDSFF39",
        "B01MFDT8NB",
        "B01MFDTH23",
        "B01MRL1DXL",
        "B01MV28ABA",
        "B01N0Z08OM",
        "B01NCRV59O",
        "B06WVNXPH2",
        "B06X1GP62S",
        "B06X6M6CNV",
        "B06X9KSRXG",
        "B06XNPM1QB",
        "B06XXXY871",
        "B06XYG6Y2T",
        "B06Y4MTPC7",
        "B06Y52WSJD",
        "B0719914FP",
        "B0719919QB",
        "B071DPLGLC",
        "B071NSD7SV",
        "B071RYLSZD",
        "B071RYLT9N",
        "B071VK52MR",
        "B0722JXLS8",
        "B0722SRRTM",
        "B073F73HT7",
        "B073GN36Z5",
        "B073GQR4X3",
        "B073GVNJLD",
        "B073JD965L",
        "B073QQNCP8",
        "B073VC9VTG",
        "B0744F1WFS",
        "B0744J4S5R",
        "B0744J4S5S",
        "B0749L5RSH",
        "B074M66F9J",
        "B074MVTFSZ",
        "B074MWQVD8",
        "B074MYWTGF",
        "B074N1KJ63",
        "B074N4GBXF",
        "B074TQCLDG",
        "B074X6LSLM",
        "B075R128J4",
        "B075ZPRJWF",
        "B0765PKXS1",
        "B0765PYK9S",
        "B076BK61LH",
        "B076BKFNQ5",
        "B076BMHM6L",
        "B076BN49SP",
        "B076BNDFXS",
        "B076BP24KM",
        "B079PT3KW8",
        "B079SL9T1G",
        "B07BGH4CGJ",
        "B07BRNBYXB",
        "B07BRNBYXC",
        "B07BRNDKYM",
        "B07BRNF86Y",
        "B07BRNFBKC",
        "B07BS1T4P1",
        "B07BS2BF9Q",
        "B07BS2GTWP",
        "B07BS4P5C1",
        "B07BS4P5CB",
        "B07BS4RFH9",
        "B07BS4RP28",
        "B07BW9HSL4",
        "B07BYSH87M",
        "B07BYT6V3D",
        "B07BZ221HL",
        "B07CD5TLC4",
        "B07CHB8P6Y",
        "B07CM3F86X",
        "B07CZKVDPS",
        "B07HMX7K9Q",
        "B07KCJM7L1",
        "B07KCM5HDH",
        "B07KNNLSL2",
        "B07KYCC9RV",
        "B07LB5J7JV",
        "B07MFMYS29",
        "B07MJ897RV",
        "B07MT4QLQW",
        "B07MWSRLHR",
        "B07MWTTJK6",
        "B07PWNGMPN",
        "B07Q4CJ185",
        "B07Q7Q8GFB",
        "B07QXB8374",
        "B07RYQQMKR",
        "B07SRJVPCW",
        "B07TT8SQY9",
        "B07VSLKDDF",
        "B07X1Z2GBT",
        "B07XDHGY8Y",
        "B07XT2JGWG",
        "B07YJLZG86",
        "B07YMNVKB7",
        "B07YYTC1TJ",
        "B07Z4Q4DTC",
        "B07Z5ZCJ9F",
        "B07ZD25R9G",
        "B07ZVYWF9F",
        "B08212TCN1",
        "B0825KNGL1",
        "B083SNJ58S",
        "B085L9X5BP",
        "B085X3ZNP6",
        "B086VM876L",
        "B087JNDRHR",
        "B087PZFVHF",
        "B088NLVXR5",
        "B088PVB573",
        "B088R8RFCY",
        "B08911NKWT",
        "B089CWVWWN",
        "B08B3K4LRL",
        "B08B4KQHSQ",
        "B08BBYL9G8",
        "B08BC3QCJX",
        "B08BC4JTW7",
        "B08BG4MDVC",
        "B08BJ4T2CV",
        "B08BNQCJQZ",
        "B08BP8TY3C",
        "B08C2HJFLF",
        "B08C2VG1LN",
        "B08CNCPGZV",
        "B08CR6M952",
        "B08CV2X1WP",
        "B08CZHS6LF",
        "B08CZMFZCF",
        "B08D3HWR57",
        "B08D63LQTG",
        "B08DH9KNDM",
        "B08DHP2WM1",
        "B08FBY87SR",
        "B08FCC8JZ1",
        "B08FDKB6L4",
        "B08FTJLK9R",
        "B08G4N7V5C",
        "B08G755KZY",
        "B08G8VKMT3",
        "B08GC2Q34S",
        "B08GH5S67D",
        "B08GJF1CF5",
        "B08GQ5H16L",
        "B08GY9QR3T",
        "B08H4ZV1TT",
        "B08H57L31P",
        "B08HCWR916",
        "B08HLQVJ94",
        "B08HVHGV1M",
        "B08HYMJ6CW",
        "B08J9S3H57",
        "B08J9S66QX",
        "B08J9WKQ7J",
        "B08JB86FH2",
        "B08JBBRCBN",
        "B08JCJGTGX",
        "B08JYQN68D",
        "B08K34FXSR",
        "B08KDVC5M1",
        "B08KGCQ5DY",
        "B08KGD9QBY",
        "B08KGFK92P",
        "B08KH5XHMC",
        "B08KWV56YJ",
        "B08KWV5XDK",
        "B08L64YXYY",
        "B08L7MC348",
        "B08L7WFZFW",
        "B08L9FCKTW",
        "B08LD6J5K3",
        "B08LDK29X8",
        "B08LKGKYN5",
        "B08LL2PGGS",
        "B08M3FNR9N",
        "B08M65FFD5",
        "B08M982NN7",
        "B08M9KSWR6",
        "B08MF2SMGM",
        "B08MWG4YJ5",
        "B08N4K32TQ",
        "B08NJ92B64",
        "B08NJ96Q7V",
        "B08NWBH4ML",
        "B08NZ84C6M",
        "B08P37LB7L",
        "B08P5W1SZB",
        "B08P85947G",
        "B08PCT55X5",
        "B08PV8R6S7",
        "B08PYPV5TP",
        "B08PYYLFQX",
        "B08PZJMC9G",
        "B08QJ2Y38D",
        "B08QYNNGYS",
        "B08R6VVP9L",
        "B08R96SFC9",
        "B08S622T7H",
        "B08SHCRHBX",
        "B08SKC79FN",
        "B08T6VF7HN",
        "B08THY565Q",
        "B08TT8L2ZC",
        "B08VFSGDC8",
        "B08VQ67YDJ",
        "B08XK3GKJT",
        "B08XW7RTKW",
        "B08Y7PGDC7",
        "B08YDC8S22",
        "B08YJ8DKVR",
        "B08YJYKM22",
        "B08YZ35LR3",
        "B08YZ3QWY3",
        "B08Z3536C7",
        "B08ZD5JR3K",
        "B08ZJG9LQP",
        "B08ZMWFR2N",
        "B08ZN5Z1TF",
        "B08ZXH1JJR",
        "B0912D92PF",
        "B0912K1W65",
        "B0912K6KH9",
        "B0912NY7GD",
        "B0912XL4GT",
        "B091314QNN",
        "B0913BN2ZM",
        "B0914PV5P3",
        "B091512ZNR",
        "B09157HRQ7",
        "B091587Q9P",
        "B091CBFNGS",
        "B091F85DGJ",
        "B091XV6W5R",
        "B091Y1WQF7",
        "B091YFPLYN",
        "B091YQNLLP",
        "B0928TSWHG",
        "B092LX1YX3",
        "B092TRTW37",
        "B093118V4B",
        "B093L5LX81",
        "B093L78YMD",
        "B093SNQYV5",
        "B09449TR6J",
        "B094NPSYKL",
        "B0953W9XHN",
        "B095W6ZCYX",
        "B095W7KD1D",
        "B095WGW4N4",
        "B0967VYT2B",
        "B096DJHZTH",
        "B096KTY1M2",
        "B096KX4KF8",
        "B096S3ZHDG",
        "B096S73PFC",
        "B096VG61VG",
        "B096Z6PFMD",
        "B09735XVT6",
        "B097BCDZZX",
        "B097DL6R8Y",
        "B0987CHCDN",
        "B098QWFDXS",
        "B09987K2S6",
        "B099F7JZZ1",
        "B099JD5WFW",
        "B099K5Z5KL",
        "B099PNNRL9",
        "B09B9BSFC1",
        "B09B9R7T3Q",
        "B09B9XDDM7",
        "B09BC6NM92",
        "B09BDWJGK4",
        "B09BHV4JC9",
        "B09BQ2SR79",
        "B09BQY1HWW",
        "B09BR7P8B1",
        "B09C3323G9",
        "B09C8PFCH2",
        "B09CCTM6FV",
        "B09CD19VGW",
        "B09CD3DX4N",
        "B09CD7YC6M",
        "B09CDVL5P5",
        "B09CGQZDKJ",
        "B09D348W59",
        "B09D3CWC7N",
        "B09D6QCK7C",
        "B09DGB4GX5",
        "B09DKPNB96",
        "B09DKSM5HF",
        "B09DVJK2MY",
        "B09DVL6SFH",
        "B09F5SZMPC",
        "B09FFC9HMB",
        "B09FSXNZCF",
        "B09FXWMSJ4",
        "B09FYSNMLS",
        "B09FYY28CF",
        "B09GFR6SJX",
        "B09GV6RHMM",
        "B09H4DTDMX",
        "B09HBHR2C9",
        "B09HBX74PM",
        "B09HRMYTH8",
        "B09HRTHK6T",
        "B09HZJJ6NB",
        "B09JLKDQ2V",
        "B09KMGB1N4",
    ]

    def validateBlock(self, chrome):
        try:
            chrome.find_element(
                By.CSS_SELECTOR, 'form[action="/errors/validateCaptcha"]')
        except NoSuchElementException:
            return True
        else:
            return False

    def validatePage(self, chrome):
        try:
            # amazon displayed url not found error
            chrome.find_element(By.ID, 'g')
        except NoSuchElementException:
            return True
        else:
            return False

    def validateTask(self, target):
        # verify that target is an asin
        if re.search(r"B[0-9A-Z]{9}", target):
            return True
        else:
            return False

    def spider(self, chrome, target):

        data = {"_id": target}

        # target data
        try:
            title = chrome.find_element(By.ID, "productTitle")
        except NoSuchElementException:
            data["title"] = None
        else:
            data["title"] = title.text

        return data


SPIDER = SelenpyCrawler(threads=1)
SPIDER.start()

# %%
